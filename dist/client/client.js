"use strict";(()=>{var adapters={qbCore:{isEnabled:!!exports["qb-core"]?.GetCoreObject()?.Functions?.HasItem,hasItem:itemName=>!!exports["qb-core"].GetCoreObject().Functions.HasItem(itemName),notify:(message,type)=>{exports["qb-core"].GetCoreObject().Functions.Notify(message,type)}}};var hasItem=itemName=>getAdapter().hasItem(itemName);var notify=(message,type)=>getAdapter().notify(message,type);var getAdapter=()=>{const enabledAdapterName=Object.keys(adapters).find(adapterName=>adapters[adapterName].isEnabled);if(!enabledAdapterName)throw new Error("No enabled adapter found");return adapters[enabledAdapterName]};var LocaleDefaults={fishing_spot_error:{label:"Você não está em um ponto de pesca.",variables:{}},has_bait_error:{label:"Você não tem uma isca de pesca.",variables:{}},has_rod_error:{label:"Você não tem uma vara de pesca.",variables:{}},near_spot_error:{label:"Você não está perto de um ponto de pesca.",variables:{}},in_vehicle_error:{label:"Você não pode pescar dentro de um veículo.",variables:{}},already_fishing_error:{label:"Você já está pescando.",variables:{}},fishing_state:{label:"Você agora está pescando...",variables:{}},fish_command_description:{label:"Inicia a pescaria caso esteja próximo a um ponto de pesca.",variables:{}},fish_command:{label:"pescar",variables:{}},pull_too_hard:{label:"A linha estourou! puxe mais devagar na próxima vez.",variables:{}},rod_cast_took_too_long:{label:"Você demorou muito para lançar a linha",variables:{}},fishing_spot_not_found:{label:"Local de pesca não encontrado",variables:{}},fish_ran_away:{label:"O peixe escapou!",variables:{}},fish_pull_hint:{label:"Pressione [E] para puxar o peixe! cuidado para não quebrar a linha!",variables:{}},fish_bite_bait:{label:"O peixe mordeu a isca, pressione [E] para puxá-lo!",variables:{}},fish_pull_too_soon:{label:"Você puxou a linha cedo demais! o peixe acabou fugindo",variables:{}},initialise_script:{label:"brz-fishing por brz.gg iniciado!",variables:{}},initialise_error:{label:"Um erro ocorreu ao iniciar a pesca.",variables:{}},no_fish_assigned:{label:"Não há peixe atribuído ao player id %PLAYER_ID%",variables:{PLAYER_ID:"PLAYER_ID"}},catching_success:{label:"Você pescou um %ITEM_LABEL%!",variables:{ITEM_LABEL:"ITEM_LABEL"}},unknown_error:{label:"Um erro ocorreu ao iniciar a pesca.",variables:{}}};var DEFAULT_LANG="pt-br";var MAXIMUM_LINE_TENSION=100;var LINE_TENSION_INCREASE_RATE=5;var TENSION_RECOVER_RATE=1;var PULL_DISTANCE_RATE_PER_TICK=10;var ROD_CAST_CHALLENGE_VELOCITY=1;var ROD_CAST_CHALLENGE_INTERVAL=1;var ROD_CAST_CHALLENGE_ACCELERATION=1e-4;var BAIT_HOLD_CHALLENGE_TIME=500;var fishingLimits={maximumLineTension:Number(MAXIMUM_LINE_TENSION)||100,lineTensionIncreaseRate:Number(LINE_TENSION_INCREASE_RATE)||5,tensionRecoverRate:Number(TENSION_RECOVER_RATE)||5,pullDistanceRatePerTick:Number(PULL_DISTANCE_RATE_PER_TICK)||10,rodCastChallengeVelocity:Number(ROD_CAST_CHALLENGE_VELOCITY)||1,rodCastChallengeInterval:Number(ROD_CAST_CHALLENGE_INTERVAL)||1,rodCastChallengeAcceleration:Number(ROD_CAST_CHALLENGE_ACCELERATION)||1e-4,baitHoldChallengeTime:Number(BAIT_HOLD_CHALLENGE_TIME)||500};var fishes={fish:{itemName:"fish",type:"common",hash:802685111},dolphin:{itemName:"dolphin",type:"uncommon",hash:-1950698411},hammerShark:{itemName:"hammershark",type:"uncommon",hash:1015224100},tigerShark:{itemName:"tigershark",type:"rare",hash:113504370},killerWhale:{itemName:"killerwhale",type:"epic",hash:-1920284487},humpBack:{itemName:"humpback",type:"legendary",hash:1193010354},stingray:{itemName:"stingray",type:"rare",hash:"a_c_stingray"}};var t=(phase,vars)=>{const locale=locales[DEFAULT_LANG];let phrase=locale[phase];if(!vars)return phrase;for(const varName of Object.keys(vars)){phrase=phrase.replace(`%${varName}%`,vars[varName])}return phrase};var locales={"pt-br":Object.values(LocaleDefaults).reduce((acc,curr,index)=>{if(typeof curr==="string"){acc[Object.keys(LocaleDefaults)[index]]=curr}else{acc[Object.keys(LocaleDefaults)[index]]=curr.label}return acc},{})};var Delay=ms=>new Promise(res=>setTimeout(res,ms));var createPed=async(...args)=>{await requestModel(args[1]);return CreatePed(...args)};var requestModel=async hash=>{if(typeof hash==="string"){hash=GetHashKey(hash)}RequestModel(hash);while(!HasModelLoaded(hash)){await Delay(10)}};var playAnim=async(dict,name,duration=1e3)=>{RequestAnimDict(dict);while(!HasAnimDictLoaded(dict)){await Delay(100)}TaskPlayAnim(PlayerPedId(),dict,name,1,1,-1,1,0,false,false,false);setTimeout(()=>{StopAnimTask(PlayerPedId(),dict,name,1)},duration)};var getFishingSpot=async(playerPed,factor=10)=>{FreezeEntityPosition(playerPed,true);const initialCoords=GetEntityCoords(playerPed,false);const forwar=GetEntityForwardVector(playerPed);let hit=false;let place;const coords=addVectorFactor(factor,initialCoords,forwar);const finalFactor=factor+50;return new Promise(resolve=>{setImmediate(async()=>{while(factor<finalFactor&&!hit){await Delay(1);factor+=.05;const f2=addVectorFactor(factor,coords,forwar);const tz=f2[2]-factor;const[a1,a2]=TestProbeAgainstWater(coords[0],coords[1],coords[2],f2[0],f2[1],tz);hit=a1;place=a2}FreezeEntityPosition(playerPed,false);if(hit&&place){return resolve(place)}return resolve(null)})})};var addVectorFactor=(factor,vec1,vec2)=>{return[vec1[0]+vec2[0]*factor,vec1[1]+vec2[1]*factor,vec1[2]+vec2[2]*factor]};var fishPed=null;var fishRope=null;var fishingSpot=null;var getFishPed=()=>fishPed;var getFishRope=()=>fishRope;var runCaughtFishAnimation=fishKey=>{return getFishingSpot(PlayerPedId(),20).then(async spot=>{if(!spot){return}const fishCaught=fishes[fishKey];const ped=await createPed(0,fishCaught.hash,spot[0],spot[1],spot[2]+1,-GetEntityHeading(PlayerPedId()),true,true);SetPedDiesWhenInjured(ped,false);SetEntityInvincible(ped,true);const fishPos=GetEntityCoords(ped,false);ModifyWater(fishPos[0],fishPos[1],50,200);const playerPos=GetOffsetFromEntityInWorldCoords(PlayerPedId(),0,-10,8);const fishPosPlayerPosDiff=[playerPos[0]-fishPos[0],playerPos[1]-fishPos[1],playerPos[2]-fishPos[2]];ApplyForceToEntity(ped,3,fishPosPlayerPosDiff[0],fishPosPlayerPosDiff[1],fishPosPlayerPosDiff[2],0,0,0,0,false,false,true,false,false);if(fishCaught.type==="legendary"){playAnim("anim@mp_player_intcelebrationfemale@freakout","freakout")}else if(fishCaught.type!=="common"){playAnim("amb@world_human_cheering@female_a","base")}setTimeout(()=>{DeletePed(ped)},2e3)})};var stopFishingAnimation=()=>{ClearPedTasks(PlayerPedId());deleteRod()};var performCastingAnimations=async()=>{await Delay(100);fishingSpot=await getFishingSpot(PlayerPedId());if(!fishingSpot){return}ModifyWater(fishingSpot[0],fishingSpot[1],50,200);const playerPosition=GetEntityCoords(PlayerPedId(),true);fishPed=await createPed(0,fishes.fish.hash,fishingSpot[0],fishingSpot[1],fishingSpot[2],-GetEntityHeading(PlayerPedId()),true,true);if(!fishPed){return}SetEntityVisible(fishPed,false,false);SetEntityInvincible(fishPed,true);SetEntityCollision(fishPed,false,false);const fishDistance=GetDistanceBetweenCoords(playerPosition[0],playerPosition[1],playerPosition[2],fishingSpot[0],fishingSpot[1],fishingSpot[2],true);RopeLoadTextures();fishRope=AddRope(playerPosition[0],playerPosition[1],playerPosition[2],0,0,0,fishDistance*4,5,fishDistance,15,.7,false,false,false,0,false,0);attachRodRopeToPed(fishPed)};var attachRodRopeToPed=ped=>{if(!fishRope||!fishingSpot){return}const playerPosition=GetEntityCoords(PlayerPedId(),true);const rod=GetClosestObjectOfType(playerPosition[0],playerPosition[1],playerPosition[2],10,GetHashKey("prop_fishing_rod_01"),false,false,false);const ropeAttachPosition=GetOffsetFromEntityInWorldCoords(rod,0,0,2.5);const fishPos=GetEntityCoords(ped,false);const fishDistance=GetDistanceBetweenCoords(playerPosition[0],playerPosition[1],playerPosition[2],fishingSpot[0],fishingSpot[1],fishingSpot[2],true);AttachEntitiesToRope(fishRope[0],rod,ped,ropeAttachPosition[0],ropeAttachPosition[1],ropeAttachPosition[2],fishPos[0],fishPos[1],fishPos[2],fishDistance,false,false,0,0)};var stopCastingAnimations=()=>{if(fishRope){RopeUnloadTextures();DeleteRope(fishRope[0])}if(fishPed){DeletePed(fishPed)}};var deleteRod=()=>{const coords=GetEntityCoords(PlayerPedId(),false);const rod=GetClosestObjectOfType(coords[0],coords[1],coords[2],10,GetHashKey("prop_fishing_rod_01"),false,false,false);if(rod){SetEntityAsMissionEntity(rod,true,true);DeleteEntity(rod)}};var detectFishPullTick;var reelingReleaseTick;var ropeCheckInterval;var shouldWindRope=true;var lastPullTime;var isWinding=false;var startReeling=()=>{pullFish(2);detectFishPullTick=setTick(async()=>{if(IsControlJustPressed(0,46)){SendNUIMessage({action:"reeling-key-pressed"});lastPullTime=new Date;pullFish(2);return}});reelingReleaseTick=setInterval(()=>{releaseLineTension();releaseFishTick()},20);ropeCheckInterval=setInterval(()=>{const rope=getFishRope();const fishPed2=getFishPed();if(!rope||!fishPed2){return}const shouldStopWinding=lastPullTime&&new Date().getTime()-lastPullTime.getTime()>1e3;const isFishInWater=IsEntityInWater(fishPed2);if(!isFishInWater){shouldWindRope=false}if(shouldStopWinding||!isFishInWater||!shouldWindRope){isWinding=false;StopRopeWinding(rope[0]);StartRopeUnwindingFront(rope[0])}else if(!isWinding){isWinding=true;StopRopeUnwindingFront(rope[0]);StartRopeWinding(rope[0])}if(shouldWindRope){RopeForceLength(rope[0],getFishingParam("fishDistance"))}},300)};var stopReeling=()=>{if(detectFishPullTick){clearTick(detectFishPullTick)}if(reelingReleaseTick){clearInterval(reelingReleaseTick)}if(ropeCheckInterval){clearInterval(ropeCheckInterval)}shouldWindRope=true};var pullFish=units=>{const tension=80/fishingLimits.lineTensionIncreaseRate;const lineTension=getFishingParam("baseLineTension")+getFishingParam("lineTension")+tension;setLineTension(lineTension);dragFish(units)};var dragFish=unitsMoved=>{const newFishDistance=Math.max(0,getFishingParam("fishDistance")-unitsMoved);setFishDistance(newFishDistance)};var setFishDistance=distance=>{setFishingParam("fishDistance",distance);const fishPed2=getFishPed();if(fishPed2){const fishCoords=GetEntityCoords(fishPed2,false);const screenPosition=GetScreenCoordFromWorldCoord(fishCoords[0],fishCoords[1],fishCoords[2]);if(screenPosition[0]){const screenResolution=GetActiveScreenResolution();const posX=screenResolution[0]*screenPosition[1];const posY=screenResolution[1]*screenPosition[2];SendNUIMessage({action:"fish-2d-position",center:false,posX,posY})}else{SendNUIMessage({action:"fish-2d-position",center:true})}}if(distance<=0){catchFish();setState("not-fishing")}};var setLineTension=tension=>{const newTension=Math.min(fishingLimits.maximumLineTension,tension);setFishingParam("lineTension",newTension);if(newTension>=80){ShakeGameplayCam("LARGE_EXPLOSION_SHAKE",.05)}if(newTension>=fishingLimits.maximumLineTension){notify(t("pull_too_hard"),"error");setState("not-fishing")}};var releaseFishTick=()=>{if(getFishingParam("fishDistance")<=0||getFishingParam("lineTension")>=fishingLimits.maximumLineTension||getFishingParam("fishDistance")===getFishingParam("initialFishDistance")){return false}const newFishDistance=Math.min(getFishingParam("initialFishDistance"),getFishingParam("fishDistance")+.05);setFishDistance(newFishDistance);if(newFishDistance===getFishingParam("initialFishDistance")){notify(t("fish_ran_away"),"error");setState("not-fishing")}};var releaseLineTension=()=>{if(getFishingParam("lineTension")>0&&getFishingParam("fishDistance")>0){const newTension=Math.max(0,getFishingParam("lineTension")-fishingLimits.tensionRecoverRate);setLineTension(newTension)}};var castingIndicatorTickTimerInterval=10;var castingIndicatorTickTimer;var castingTimeout;var currentIndicatorPercentage=0;var indicatorDirection=1;var lockIndicatorTick;var startCasting=()=>{castingIndicatorTickTimer=setInterval(indicatorPercentageTick,castingIndicatorTickTimerInterval);castingTimeout=setTimeout(()=>{notify(t("rod_cast_took_too_long"),"error");setState("not-fishing")},5e3);lockIndicatorTick=setTick(async()=>{if(IsControlJustPressed(0,46)){await castRodLine()}})};var stopCasting=()=>{if(castingIndicatorTickTimer){clearInterval(castingIndicatorTickTimer)}if(lockIndicatorTick){clearTick(lockIndicatorTick)}};var castRodLine=async()=>{clearTimeout(castingTimeout);const fishingSpot2=await getFishingSpot(PlayerPedId());if(!fishingSpot2){notify(t("fishing_spot_not_found"),"error");return}const fishDistance=GetDistanceBetweenCoords(fishingSpot2[0],fishingSpot2[1],fishingSpot2[2],GetEntityCoords(PlayerPedId(),true)[0],GetEntityCoords(PlayerPedId(),true)[1],GetEntityCoords(PlayerPedId(),true)[2],true);useBait();stopCasting();await performCastingAnimations();setFishingParam("rodCastPercentage",currentIndicatorPercentage);setFishingParam("fishDistance",fishDistance);setFishingParam("initialFishDistance",fishDistance);await Delay(2e3);setState("baiting")};var indicatorPercentageTick=()=>{currentIndicatorPercentage+=indicatorDirection;if(currentIndicatorPercentage>=100){indicatorDirection=-1}if(currentIndicatorPercentage<=0){indicatorDirection=1}setFishingParam("rodCastPercentage",currentIndicatorPercentage)};var baitingTickInterval;var baitingOpportunityTickInterval;var detectBaitCatchTick;var detectFishPullTick2;var startBaiting=()=>{baitingTickInterval=setInterval(baitingTick,20);detectFishPullTick2=setTick(async()=>{if(IsControlJustPressed(0,46)){notify(t("fish_pull_too_soon"),"error");setState("not-fishing")}})};var stopBaiting=()=>{stopBaitCatchTick();clearDetectFishPullTick();clearInterval(baitingTickInterval);clearInterval(baitingOpportunityTickInterval)};var clearDetectFishPullTick=()=>{if(detectFishPullTick2){clearTick(detectFishPullTick2)}};var baitingTick=async()=>{const baitingTime=getFishingParam("baitingTime");setFishingParam("baitingTime",baitingTime+1);if(baitingTime>=100){clearInterval(baitingTickInterval);notify(t("fish_bite_bait"),"success");startBaitingOpportunity()}};var startBaitingOpportunity=()=>{clearDetectFishPullTick();SendNUIMessage({action:"show-baiting-tooltips"});baitingOpportunityTickInterval=setInterval(baitingOpportunityTick,10);detectBaitCatchTick=setTick(async()=>{console.log("detectBaitCatchTick");if(IsControlJustPressed(0,46)){SendNUIMessage({action:"hide-baiting-tooltips"});clearInterval(baitingOpportunityTickInterval);stopBaitCatchTick();notify(t("fish_pull_hint"),"success");setState("reeling");return}})};var baitingOpportunityTick=async()=>{const catchOpportunityWindow=getFishingParam("catchOpportunityWindow");setFishingParam("catchOpportunityWindow",catchOpportunityWindow+1);if(catchOpportunityWindow>=100){clearInterval(baitingOpportunityTickInterval);setState("not-fishing");notify(t("fish_ran_away"),"error")}};var stopBaitCatchTick=()=>{if(detectBaitCatchTick){clearTick(detectBaitCatchTick)}};var fishingState="not-fishing";var fishingParameters={fishId:null,rodCastPercentage:0,lineTension:0,fishDistance:100,initialFishDistance:-1,baseLineTension:0,baitingTime:0,catchOpportunityWindow:0};var defaultValues=Object.assign({},fishingParameters);var stateHandlers={casting:{onEnter:startCasting,onLeave:stopCasting},baiting:{onEnter:startBaiting,onLeave:stopBaiting},reeling:{onEnter:startReeling,onLeave:stopReeling},"not-fishing":{onEnter:()=>stopFishing(),onLeave:()=>{}}};var resetFishingParams=()=>{for(const key in fishingParameters){setFishingParam(key,defaultValues[key])}};var setState=state=>{stateHandlers[fishingState].onLeave();fishingState=state;SendNUIMessage({action:"set-state",state});stateHandlers[state].onEnter()};var getState=()=>fishingState;var setFishingParam=(parameter,value)=>{fishingParameters[parameter]=value;SendNUIMessage({action:"set-param",param:parameter,value})};var getFishingParam=parameter=>fishingParameters[parameter];var emitNetTyped=(eventName,...data)=>{emitNet(eventName,...data)};var startFishing=async(source,fishId)=>{try{if(await canStartFishing(source)){resetFishingParams();setFishingParam("fishId",fishId);SetNuiFocus(false,false);TaskStartScenarioInPlace(PlayerPedId(),"WORLD_HUMAN_STAND_FISHING",0,true);SendNUIMessage({action:"start-fishing"});setState("casting");notify(t("fishing_state"),"success")}}catch(error){notify(error.message,"error")}};var requestStartFishing=async()=>emitNetTyped("brz-fishing:requestStartFishing",GetPlayerServerId(PlayerId()));var stopFishing=()=>{SetNuiFocus(false,false);SendNUIMessage({action:"stop-fishing"});stopFishingAnimation();stopCastingAnimations();resetFishingParams()};var useBait=()=>{emitNetTyped("brz-fishing:useBait",GetPlayerServerId(PlayerId()))};var catchFish=()=>{runCaughtFishAnimation(getFishingParam("fishId"));emitNetTyped("brz-fishing:catchFish",GetPlayerServerId(PlayerId()))};var canStartFishing=async player=>{const playerPed=GetPlayerPed(player);const conditions={isntFishing:{tick:getState()==="not-fishing",message:t("already_fishing_error")},notInVehicle:{tick:!IsPedInAnyVehicle(playerPed,false),message:t("in_vehicle_error")},hasRod:{tick:hasItem("fishingrod1"),message:t("has_rod_error")},hasBait:{tick:hasItem("commonbait"),message:t("has_bait_error")},inFishingSpot:{tick:!!await getFishingSpot(PlayerPedId()),message:t("fishing_spot_error")}};const failedCondition=Object.values(conditions).find(condition=>!condition.tick);if(failedCondition){throw new Error(failedCondition.message)}return true};RegisterCommand(t("fish_command"),(source,args)=>{changeFishingState()},false);TriggerEvent("chat:addSuggestion","/"+t("fish_command"),t("fish_command_description"),[]);onNet("brz-fishing:startFishing",fishId=>startFishing(GetPlayerServerId(PlayerId()),fishId));onNet("inventory:client:ItemBox",(itemData,type)=>{if(type==="use"&&itemData.name==="fishingrod1"){changeFishingState()}});var changeFishingState=()=>{if(getState()==="not-fishing"){requestStartFishing()}else{setState("not-fishing")}};})();
